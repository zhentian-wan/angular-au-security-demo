{"version":3,"file":"/Users/zhentianwan/Documents/Programming/Angular2/angular-security-course/server/create-user.route.ts","sources":["/Users/zhentianwan/Documents/Programming/Angular2/angular-security-course/server/create-user.route.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,uCAA8B;AAG9B,+BAAiC;AACjC,6DAAuD;AACvD,mDAA6C;AAC7C,iDAA6C;AAE7C,oBAA4B,GAAY,EAAE,GAAa;IACrD,IAAM,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC;IAE7B,IAAM,MAAM,GAAG,sCAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAEtD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACtB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,MAAM,QAAA;SACP,CAAC,CAAC;IACL,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,oBAAoB,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACzC,CAAC;AACH,CAAC;AAZD,gCAYC;AAED,8BAAoC,GAAG,EAAE,WAAW;;4BAI5C,IAAI;;;wBAFa,qBAAM,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAA;;qCAAvC,SAAuC;2BAEjD,aAAE,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC;oBAE3C,qBAAM,4BAAW,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAArB,CAAqB,CAAC,EAAA;;gCAA1D,SAA0D;oBAC5E,2BAA2B;oBAC3B,4BAAY,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;oBAC5C,4BAA4B;oBAC5B,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,EAAE;wBACjC,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,IAAI,CAAC,oBAAoB;qBAClC,CAAC,CAAC;oBACH,kBAAkB;oBAClB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;;;;;CACxD","sourcesContent":["import {Request, Response} from 'express';\nimport {db} from './database';\nimport {USERS} from './database-data';\n\nimport * as argon2 from 'argon2';\nimport {validatePassword} from './password-validation';\nimport {randomBytes} from './security.utils';\nimport {sessionStore} from './session-store';\n\nexport function createUser (req: Request, res: Response) {\n  const credentials = req.body;\n\n  const errors = validatePassword(credentials.password);\n\n  if (errors.length > 0) {\n    res.status(400).json({\n      errors\n    });\n  } else {\n    createUserAndSession(res, credentials);\n  }\n}\n\nasync function createUserAndSession(res, credentials) {\n  // Create a password digest\n  const passwordDigest = await argon2.hash(credentials.password);\n  // Save into db\n  const user = db.createUser(credentials.email, passwordDigest);\n  // create random session id\n  const sessionId = await randomBytes(32).then(bytes => bytes.toString('hex'));\n  // link sessionId with user\n  sessionStore.createSession(sessionId, user);\n  // set sessionid into cookie\n  res.cookie('SESSIONID', sessionId, {\n    httpOnly: true, // js cannot access cookie\n    secure: true // enable https only\n  });\n  // send back to UI\n  res.status(200).json({id: user.id, email: user.email});\n}\n"]}
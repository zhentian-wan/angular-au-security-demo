{"version":3,"file":"/Users/zhentianwan/Documents/Programming/Angular2/angular-security-course/server/server.ts","sources":["/Users/zhentianwan/Documents/Programming/Angular2/angular-security-course/server/server.ts"],"names":[],"mappings":";;AAAA,iCAAmC;AAEnC,uBAAyB;AACzB,6BAA+B;AAC/B,mEAAwD;AACxD,yDAA+C;AAC/C,mDAAyC;AACzC,+DAAsD;AACtD,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC1C,IAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAE9C,IAAM,MAAM,GAAW,OAAO,CAAC,MAAM,EAAE,CAAC;AAExC,IAAM,GAAG,GAAgB,OAAO,EAAE,CAAC;AAEnC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;AAExB,IAAM,eAAe,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAErD,IAAM,iBAAiB,GAAG;IACxB,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,IAAI,EAAC;CACrD,CAAC;AAEF,IAAM,OAAO,GAAG,eAAe,CAAC,iBAAiB,CAAC,CAAC;AAEnD,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAG3B,cAAc;AACd,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,qCAAc,CAAC,CAAC;AAE3C,WAAW;AACX,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC;KACtB,GAAG,CAAC,uCAAc,CAAC,CAAC;AAEvB,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC;KACrB,IAAI,CAAC,8BAAU,CAAC,CAAC;AAGpB,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC;KACnB,GAAG,CAAC,wBAAO,CAAC,CAAC;AAGhB,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAEnB,IAAM,aAAW,GAAG,KAAK,CAAC,YAAY,CAAC;QACrC,GAAG,EAAE,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC;QAC/B,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC;KAClC,EAAE,GAAG,CAAC,CAAC;IAER,kFAAkF;IAClF,aAAW,CAAC,MAAM,CAAC,IAAI,EAAE,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,mDAAmD,GAAG,aAAW,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAA7F,CAA6F,CAAC,CAAC;AAEhI,CAAC;AACD,IAAI,CAAC,CAAC;IAEJ,wBAAwB;IACxB,IAAM,YAAU,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE;QAClC,OAAO,CAAC,GAAG,CAAC,2CAA2C,GAAG,YAAU,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;IACvF,CAAC,CAAC,CAAC;AAEL,CAAC","sourcesContent":["import * as express from 'express';\nimport {Application, Router} from 'express';\nimport * as fs from 'fs';\nimport * as https from 'https';\nimport {readAllLessons} from './read-all-lessons.route';\nimport {createUser} from './create-user.route';\nimport {getUser} from './get-user.route';\nimport {isSessionValid} from './valid-session.middle';\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\n\nconst router: Router = express.Router();\n\nconst app: Application = express();\n\napp.use(cookieParser());\n\nconst commandLineArgs = require('command-line-args');\n\nconst optionDefinitions = [\n  {name: 'secure', type: Boolean, defaultOption: true},\n];\n\nconst options = commandLineArgs(optionDefinitions);\n\napp.use(bodyParser.json());\n\n\n// middlewares\nrouter.use('/api/lessons', isSessionValid);\n\n// REST API\napp.route('/api/lessons')\n  .get(readAllLessons);\n\napp.route('/api/signup')\n  .post(createUser);\n\n\napp.route('/api/user')\n  .get(getUser);\n\n\nif (options.secure) {\n\n  const httpsServer = https.createServer({\n    key: fs.readFileSync('key.pem'),\n    cert: fs.readFileSync('cert.pem')\n  }, app);\n\n  // launch an HTTPS Server. Note: this does NOT mean that the application is secure\n  httpsServer.listen(9000, () => console.log('HTTPS Secure Server running at https://localhost:' + httpsServer.address().port));\n\n}\nelse {\n\n  // launch an HTTP Server\n  const httpServer = app.listen(9000, () => {\n    console.log('HTTP Server running at https://localhost:' + httpServer.address().port);\n  });\n\n}\n\n\n\n\n\n\n\n\n"]}